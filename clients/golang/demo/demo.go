package main


import (
	"encoding/base64"
	"encoding/json"
	"strings"
	"bytes"
	"reflect"
	"unicode/utf8"
    "fmt"
    "io/ioutil"
    "log"
    "net/http"
    "os"

	"example.com/laravel"
)

type AutoGeneratedStruct struct {
	Data struct {
		Contents string `json:"contents"`
	} `json:"data"`
	Meta struct {
		App         string `json:"app"`
		Version     string `json:"version"`
		Key         string `json:"key"`
	} `json:"meta"`
}

// declaring a struct
type DataStruct struct {
	// defining struct variables
	Id          string
	Name        string
	Description string
}

func main() {
	// defining a struct instance
	var content []DataStruct

	// Header key
	var privateKey = "mycustomkey12345"
	var encrypt = laravel.EncryptString(privateKey, `custom`)

	var endpoint = "http://127.0.0.1:8000/api/album"
    var responseObject AutoGeneratedStruct

	fmt.Println("Calling API...")
	client := &http.Client{}
	req, err := http.NewRequest("GET", endpoint, nil)
	if err != nil {
		fmt.Print(err.Error())
		os.Exit(1)
	}

	req.Header.Add("Accept", "application/json")
 	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", "Bearer 24THBCnd33NFyG4pCabDcVmfWpLpgJoAN2m6zVjY39539c46")
	req.Header.Add("X-Value", encrypt)
 	response, err := client.Do(req)
	if err != nil {
		fmt.Print(err.Error())
	}
	defer response.Body.Close()

    responseData, err := ioutil.ReadAll(response.Body)
    if err != nil {
        log.Fatal(err)
    }

	// Parse response
    json.Unmarshal([]byte(responseData), &responseObject)

	// // Show pretty-print JSON Response
	// marshaled, err := json.MarshalIndent(responseObject, "", "   ")
   	// if err != nil {
    //   	log.Fatalf("marshaling error: %s", err)
   	// }
	// fmt.Printf("response: %v\n", string(marshaled))
	// fmt.Println("==============================")

	// decodedApiMetaKey
	var metaData = responseObject.Meta.Key;
	fmt.Printf("metaData: %v\n", metaData)

	fmt.Println("==============================")
	// Decrypt key	
    fullMetaKey := laravel.DecryptString(privateKey, metaData)	
	fmt.Printf("fullMetaKey : %v\n", fullMetaKey)

	// Slice to 16 characters
	metaKey := strings.TrimSpace(fullMetaKey[0:16])
    fmt.Printf("metaKey     : %v\n", metaKey)
	fmt.Printf("Len of metaKey  : %+v\n", utf8.RuneCountInString(metaKey))
	fmt.Printf("Type of metaKey : %+v\n", reflect.TypeOf(metaKey))
	fmt.Println("==============================")

	// decodedContents
	var responseObjectDataContents = responseObject.Data.Contents;
	decodedContents, err := base64.StdEncoding.DecodeString(responseObjectDataContents)
	if err != nil {
		log.Fatalf("Error decoding base64 string: %v", err)
		return
	}
	decodedString := string(decodedContents)
	
	// Decrypt contents
	contents := laravel.DecryptString(metaKey, decodedString)

	// Remove trailing characters using bytes.TrimFunc
	trimmedJsonString := bytes.TrimFunc([]byte(contents), func(r rune) bool {
        return r < ' ' // Remove characters with ASCII value less than space (32)
    })

	// Parse JSON
	Data := []byte(trimmedJsonString);
	errx := json.Unmarshal(Data, &content)
	if errx != nil {
		// if error is not nil
		// print error
		fmt.Println("FAILED PARSING: ", errx)
	}
	fmt.Printf("Total-Data: %+v\n", len(content))


	// Show pretty-print JSON content
	marshaledC, err := json.MarshalIndent(content, "", "   ")
   	if err != nil {
      	log.Fatalf("marshaling content error: %s", err)
   	}
	fmt.Printf("contents: %v\n", string(marshaledC))
	fmt.Println("==============================")

	// /// printing decoded array
	// // values one by one
	// fmt.Println("START PARSING: ============================")
	// for i := range content {
	// 	fmt.Println(content[i].Id + " - " + content[i].Name +
	// 		" - " + content[i].Description)
	// }
	// fmt.Println("END PARSING: ============================")
}
